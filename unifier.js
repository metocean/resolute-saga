// Generated by CoffeeScript 1.9.2
var loghelper;

loghelper = require('./loghelper');

module.exports = function(logwatcher, loglocker, options) {
  var handle, ontask, queued;
  ontask = options.ontask;
  queued = {};
  handle = logwatcher.onlog(function(url, instance) {
    if (queued[url] == null) {
      return;
    }
    if (queued[url][instance.key] == null) {

    }
  });
  return {
    onmessage: function(url, sagakey, messagekey, e, cb) {
      var retrymessage, trymessage;
      console.log("MESSAGE " + url + sagakey + "." + messagekey + " " + e.msgid);
      retrymessage = function(e, cb) {
        console.log("Trying " + messagekey + " " + e.msgid + " again in 1 seconds");
        return setTimeout(function() {
          return trymessage(e, cb);
        }, 1000);
      };
      trymessage = function(e, cb) {
        var instance, interpreted, log;
        instance = logwatcher.getinstance(url, sagakey);
        log = instance != null ? instance.log : void 0;
        if (log == null) {
          log = [];
        }
        interpreted = instance != null ? instance.interpreted : void 0;
        if (interpreted == null) {
          interpreted = loghelper.blankinterpretedlog();
        }
        if (interpreted.handledmessages[e.msgid] != null) {
          console.log("Message " + e.msgid + " already seen");
          return cb();
        }
        return loglocker.acquire(url, sagakey, loghelper.stringify(log), function(success) {
          if (!success) {
            return retrymessage(e, cb);
          }
          log.push({
            type: 'handledmessage',
            id: e.msgid
          });
          return loglocker.release(url, sagakey, loghelper.stringify(log), function(success) {
            if (!success) {
              return retrymessage(e, cb);
            }
            console.log(e.msgid + " written to log");
            return cb();
          });
        });
      };
      return trymessage(e, cb);
    },
    ontimeout: function(url, sagakey, timeoutkey, value) {
      return console.log("TIMEOUT " + url + sagakey + "." + timeoutkey);
    },
    oninterval: function(url, sagakey, intervalkey, count, value) {
      return console.log("INTERVAL " + url + sagakey + "." + intervalkey);
    },
    destroy: function() {
      return handle.off();
    }
  };
};
