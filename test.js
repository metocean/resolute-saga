// Generated by CoffeeScript 1.9.2
var Dispatcher, Subscriptions, async, bus, chrono, consul, dispatcher, moment, resolute, spanner, subscriptions;

consul = require('consul-utils');

moment = require('moment-timezone');

spanner = require('timespanner');

chrono = require('chronological');

moment = chrono(spanner(moment));

async = require('odo-async');

resolute = require('resolute');

bus = resolute({
  bind: 'tcp://127.0.0.1:12345',
  datadir: './12345'
});

Subscriptions = require('resolute/subscriptionmanager');

subscriptions = Subscriptions(bus, {
  'weather update': ['tcp://127.0.0.1:12346']
});

Dispatcher = function(worker, bus, subscriptions) {
  var res, sagas;
  sagas = {};
  res = {
    register: function(saganame, saga, cb) {
      var sagacontext, tasks;
      sagacontext = {
        subscriptions: [],
        saga: saga
      };
      tasks = [];
      return saga.configuresaga({
        map: function(key, fn) {
          return tasks.push(function(cb) {
            return subscriptions.subscribe(key, function() {
              sagacontext.subscriptions.push(key);
              console.log(saganame + " subscribed to " + key);
              return cb();
            });
          });
        },
        ready: function() {
          return async.parallel(tasks, function() {
            console.log(saganame + " configured");
            sagas[saganame] = sagacontext;
            if (cb != null) {
              return cb();
            }
          });
        }
      });
    },
    deregister: function(saganame, cb) {
      var fn1, i, key, len, ref, tasks;
      console.log("removing " + saganame);
      tasks = [];
      ref = sagas[saganame].subscriptions;
      fn1 = function(key) {
        return tasks.push(function(cb) {
          return subscriptions.unsubscribe(key, cb);
        });
      };
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        fn1(key);
      }
      return async.parallel(tasks, function() {
        delete sagas[saganame];
        if (cb != null) {
          return cb();
        }
      });
    },
    end: function(cb) {
      var _, fn1, key, tasks;
      tasks = [];
      fn1 = function(key) {
        return tasks.push(function(cb) {
          return res.deregister(key, cb);
        });
      };
      for (key in sagas) {
        _ = sagas[key];
        fn1(key);
      }
      return async.parallel(tasks, function() {
        if (cb != null) {
          return cb();
        }
      });
    }
  };
  return res;
};

dispatcher = Dispatcher(worker, bus, subscriptions);

dispatcher.register('saga1', require('./testsaga'));

process.on('SIGINT', function() {
  return dispatcher.end(function() {
    return worker.destroy(function() {
      return bus.close();
    });
  });
});
