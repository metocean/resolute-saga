// Generated by CoffeeScript 1.9.2
var LOG, consul, strendswith;

consul = require('consul-utils');

LOG = require('./sagalogparser');

strendswith = function(str, suffix) {
  return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

module.exports = function(httpAddr) {
  var _fin, _listeners, getblanklog, makewatch, readkv, res, sagas;
  _fin = false;
  sagas = {};
  _listeners = [];
  readkv = function(url, keys) {
    var i, instance, key, len, listener, results;
    if (sagas[url] == null) {
      console.error(url + " already deleted, how come I'm still watching?");
      return;
    }
    keys = keys.filter(function(k) {
      return k.Key !== url;
    }).filter(function(k) {
      return strendswith(k.Key, '.log');
    }).map(function(d) {
      d.Key = d.Key.substr(url.length);
      d.Key = d.Key.substr(0, d.Key.length - 4);
      if (d.Value == null) {
        d.Value = '';
      }
      return d;
    });
    results = [];
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      instance = {
        key: key.Key,
        log: LOG.parse(key.Value)
      };
      sagas[url].log[key.Key] = instance;
      results.push((function() {
        var j, len1, results1;
        results1 = [];
        for (j = 0, len1 = _listeners.length; j < len1; j++) {
          listener = _listeners[j];
          results1.push(listener(url, instance));
        }
        return results1;
      })());
    }
    return results;
  };
  makewatch = function(url) {
    return new consul.KV(httpAddr, url, {
      recurse: true
    }, function(keys) {
      return readkv(url, keys);
    });
  };
  getblanklog = function(key) {
    return {
      key: key,
      log: LOG.blank()
    };
  };
  return res = {
    watch: function(url) {
      if (sagas[url] != null) {
        return;
      }
      sagas[url] = {
        log: {}
      };
      return sagas[url].watch = makewatch(url);
    },
    unwatch: function(url) {
      if (sagas[url] == null) {
        return;
      }
      sagas[url].watch.end();
      return delete sagas[url];
    },
    getoutdated: function(url, key) {
      if (sagas[url] == null) {
        return getblanklog(key);
      }
      if (sagas[url].log[key] == null) {
        return getblanklog(key);
      }
      return sagas[url].log[key];
    },
    get: function(url, key, cb) {
      return consul.GetKV(httpAddr, "" + url + key + ".log", function(err, keys) {
        if (err != null) {
          return cb(err);
        }
        readkv(url, keys);
        if (sagas[url].log[key] == null) {
          return cb(null, getblanklog(key));
        }
        return cb(null, sagas[url].log[key]);
      });
    },
    set: function(url, key, content, cb) {
      content = LOG.stringify(content);
      return consul.SetKV(httpAddr, "" + url + key + ".log", content, function(err) {
        if (err != null) {
          return cb(err);
        }
        sagas[url].log[key] = {
          key: key,
          log: LOG.parse(content)
        };
        return cb(null, sagas[url].log[key]);
      });
    },
    onlog: function(cb) {
      _listeners.push(cb);
      return {
        off: function() {
          var index;
          index = _listeners.indexOf(cb);
          if (index !== -1) {
            return _listeners.splice(index, 1);
          }
        }
      };
    },
    destroy: function(cb) {
      var _, url;
      if (_fin) {
        return;
      }
      _fin = true;
      for (url in sagas) {
        _ = sagas[url];
        res.unwatch(url);
      }
      if (cb != null) {
        return cb();
      }
    }
  };
};
