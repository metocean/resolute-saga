// Generated by CoffeeScript 1.9.2
var chrono, loghelper, moment, spanner;

moment = require('moment-timezone');

spanner = require('timespanner');

chrono = require('chronological');

moment = chrono(spanner(moment));

loghelper = require('./loghelper');

module.exports = function(logwatcher, options) {
  var handle, ontimeout, timeoutsforsagas;
  timeoutsforsagas = {};
  ontimeout = options.ontimeout;
  if (ontimeout == null) {
    ontimeout = function() {};
  }
  handle = logwatcher.onlog(function(url, instance) {
    var _, key, ref, ref1, ref2, results, timeout, timeouts, timeoutsforsaga;
    if (timeoutsforsagas[url] == null) {
      timeoutsforsagas[url] = {};
    }
    timeoutsforsaga = timeoutsforsagas[url];
    if (timeoutsforsaga[instance.key] == null) {
      timeoutsforsaga[instance.key] = {};
    }
    timeouts = timeoutsforsaga[instance.key];
    ref = instance.interpreted.clearedtimeouts;
    for (key in ref) {
      _ = ref[key];
      if (timeouts[key] != null) {
        timeouts[key].cancel();
        delete timeouts[key];
      }
    }
    ref1 = instance.interpreted.handledtimeouts;
    for (key in ref1) {
      _ = ref1[key];
      if (timeouts[key] != null) {
        timeouts[key].cancel();
        delete timeouts[key];
      }
    }
    ref2 = instance.interpreted.timeouts;
    results = [];
    for (key in ref2) {
      timeout = ref2[key];
      if (timeouts[key] != null) {
        continue;
      }
      results.push((function(key, timeout) {
        timeout = moment.utc(timeout, 'YYYY-MM-DD[T]HH:mm:ssZ');
        return timeouts[key] = timeout.timer(function(value) {
          delete timeouts[key];
          return ontimeout(url, instance.key, key, value);
        });
      })(key, timeout));
    }
    return results;
  });
  return {
    destroy: function() {
      var _, results, timeout, timeouts, timeoutsforsaga;
      handle.off();
      results = [];
      for (_ in timeoutsforsagas) {
        timeoutsforsaga = timeoutsforsagas[_];
        results.push((function() {
          var results1;
          results1 = [];
          for (_ in timeoutsforsaga) {
            timeouts = timeoutsforsaga[_];
            results1.push((function() {
              var results2;
              results2 = [];
              for (_ in timeouts) {
                timeout = timeouts[_];
                results2.push(timeout.cancel());
              }
              return results2;
            })());
          }
          return results1;
        })());
      }
      return results;
    }
  };
};
