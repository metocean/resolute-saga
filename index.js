// Generated by CoffeeScript 1.9.2
var bus, dispatcher, exittimeout, hub, resolute, sagainterval, sagalock, sagalog, sagatimeout, subscriptions, unifier;

sagalog = require('./sagalog');

sagalock = require('./sagalock');

resolute = require('resolute');

subscriptions = require('resolute/subscriptions');

dispatcher = require('./dispatcher');

unifier = require('./unifier');

sagatimeout = require('./sagatimeout');

sagainterval = require('./sagainterval');

hub = require('odo-hub/hub')(require('odo-hub/dispatch_parallel')());

sagalog = sagalog('docker:8500');

sagalock = sagalock('docker:8500');

sagatimeout = sagatimeout(sagalog, {
  ontimeout: unifier.ontimeout
});

sagainterval = sagainterval(sagalog, {
  oninterval: unifier.oninterval
});

bus = resolute({
  bind: 'tcp://127.0.0.1:12345',
  datadir: './12345'
});

subscriptions = subscriptions(bus);

dispatcher = dispatcher(subscriptions, hub);

unifier = unifier(sagalog, sagalock, {
  ontask: dispatcher.ontask
});

subscriptions.bind('weather update', 'tcp://127.0.0.1:12346');

dispatcher.register('sagas/saga1/', require('./testsaga'));

sagalog.watch('sagas/saga1/');

hub.every('message', function(e, cb) {
  return unifier.onmessage('sagas/saga1/', 'exe1', 'message', e, cb);
});

setTimeout(function() {
  hub.emit('message', {
    msgid: 1,
    value: 'awesome'
  });
  return hub.emit('message', {
    msgid: 2,
    value: 'awesome'
  });
}, 500);

setTimeout(function() {
  return hub.emit('message', {
    msgid: 3,
    value: 'awesome'
  });
}, 5000);

exittimeout = null;

process.on('SIGINT', function() {
  var close, exit;
  close = function() {
    clearTimeout(exittimeout);
    bus.close();
    unifier.destroy();
    sagalog.destroy();
    return sagalock.destroy();
  };
  exit = function() {
    close();
    return process.exit(0);
  };
  if (exittimeout != null) {
    exit();
  }
  exittimeout = setTimeout(exit, 10000);
  console.log('Waiting for queues to empty.');
  console.log('(^C again to quit)');
  sagatimeout.destroy();
  sagainterval.destroy();
  return dispatcher.end(function() {
    return bus.drain(function() {
      return unifier.drain(function() {
        return close();
      });
    });
  });
});
