// Generated by CoffeeScript 1.9.2
var bus, coordinator, dispatcher, exittimeout, hub, resolute, sagainterval, sagalock, sagalog, sagatimeout, subscriptions;

sagalog = require('./log');

sagalock = require('./lock');

resolute = require('resolute');

subscriptions = require('resolute/subscriptions');

dispatcher = require('./dispatcher');

coordinator = require('./coordinator');

sagatimeout = require('./timeout');

sagainterval = require('./interval');

hub = require('odo-hub/hub')(require('odo-hub/dispatch_parallel')());

sagalog = sagalog('docker:8500');

sagalock = sagalock('docker:8500');

bus = resolute({
  bind: "tcp://127.0.0.1:" + process.argv[2],
  datadir: "./" + process.argv[2]
});

subscriptions = subscriptions(bus);

dispatcher = dispatcher(subscriptions, bus.raw);

coordinator = coordinator(sagalog, sagalock, {
  onmessage: dispatcher.onmessage,
  ontimeout: dispatcher.ontimeout,
  oninterval: dispatcher.oninterval
});

sagatimeout = sagatimeout(coordinator, {
  ontimeout: coordinator.ontimeout
});

sagainterval = sagainterval(coordinator, {
  oninterval: coordinator.oninterval
});

subscriptions.bind('weather update', 'tcp://127.0.0.1:12346');

dispatcher.register(coordinator.onmessage, 'sagas/saga1/', require('./testsaga'));

sagalog.watch('sagas/saga1/');

exittimeout = null;

process.on('SIGINT', function() {
  var close, exit;
  close = function() {
    clearTimeout(exittimeout);
    bus.close();
    coordinator.destroy();
    sagalog.destroy();
    return sagalock.destroy();
  };
  exit = function() {
    close();
    return process.exit(0);
  };
  if (exittimeout != null) {
    exit();
  }
  exittimeout = setTimeout(exit, 10000);
  console.log('Waiting for queues to empty.');
  console.log('(^C again to quit)');
  sagatimeout.destroy();
  sagainterval.destroy();
  return dispatcher.end(function() {
    return bus.drain(function() {
      bus.close();
      return coordinator.drain(function() {
        return close();
      });
    });
  });
});
