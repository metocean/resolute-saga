// Generated by CoffeeScript 1.9.2
var async, chrono, hub, id, interval, loghelper, loglocker, logwatcher, moment, retrymessage, sagatimeout, spanner, trymessage;

moment = require('moment-timezone');

spanner = require('timespanner');

chrono = require('chronological');

moment = chrono(spanner(moment));

logwatcher = require('./logwatcher');

logwatcher = logwatcher('docker:8500');

loglocker = require('./loglocker');

loglocker = loglocker('docker:8500');

sagatimeout = require('./sagatimeout');

sagatimeout = sagatimeout(logwatcher, {
  ontimeout: function(url, sagakey, timeoutkey) {
    return console.log("TIMEOUT " + url + sagakey + "." + timeoutkey);
  }
});

loghelper = require('./loghelper');

hub = require('odo-hub/parallel');

async = require('odo-async');

logwatcher.watch('sagas/saga1/');

id = 1;

interval = setInterval(function() {
  hub.emit('message', {
    msgid: id,
    value: 'awesome'
  });
  return id++;
}, 1000);

retrymessage = function(e, cb) {
  console.log("Trying " + e.msgid + " again in 10 seconds");
  return setTimeout(function() {
    return trymessage(e, cb);
  }, 10000);
};

trymessage = function(e, cb) {
  var instance, interpreted, log;
  instance = logwatcher.getinstance('sagas/saga1/', 'exe1');
  log = instance != null ? instance.log : void 0;
  if (log == null) {
    log = [];
  }
  interpreted = instance != null ? instance.interpreted : void 0;
  if (interpreted == null) {
    interpreted = loghelper.blankinterpretedlog();
  }
  if (interpreted.handledmessages[e.msgid] != null) {
    console.log("Message " + e.msgid + " already seen");
    return cb();
  }
  return loglocker.acquire('sagas/saga1/', 'exe1', loghelper.stringify(log), function(success) {
    if (!success) {
      return retrymessage(e, cb);
    }
    log.push({
      type: 'handledmessage',
      id: e.msgid
    });
    return loglocker.release('sagas/saga1/', 'exe1', loghelper.stringify(log), function(success) {
      if (!success) {
        return retrymessage(e, cb);
      }
      console.log(e.msgid + " written to log");
      return cb();
    });
  });
};

hub.every('message', trymessage);

process.on('SIGINT', function() {
  clearInterval(interval);
  logwatcher.destroy();
  loglocker.destroy();
  return sagatimeout.destroy();
});
